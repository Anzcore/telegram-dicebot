import os
import random
import logging
import asyncio
from flask import Flask, request, abort
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    MessageHandler, filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ["TELEGRAM_TOKEN"]

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
bot_app = Application.builder().token(TOKEN).build()

# --- –ö–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è ---

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å d20")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫:",
        reply_markup=reply_markup
    )

# –ë—Ä–æ—Å–æ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
async def handle_roll_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üé≤ –ë—Ä–æ—Å–∏—Ç—å d20":
        result = random.randint(1, 20)
        if result == 20:
            msg = "üé≤ –¢—ã –±—Ä–æ—Å–∏–ª 20! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö! üéâ"
        elif result == 1:
            msg = "üé≤ –¢—ã –±—Ä–æ—Å–∏–ª 1... –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—É–¥–∞—á–∞! üíÄ"
        else:
            msg = f"üé≤ –¢—ã –±—Ä–æ—Å–∏–ª {result}"
        await update.message.reply_text(msg)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_roll_button))

# --- Flask Webhook ---

@app.route("/")
def index():
    return {"message": "DiceBot is running!"}

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        data = request.get_json(force=True)
        update = Update.de_json(data, bot_app.bot)

        async def process():
            await bot_app.initialize()
            await bot_app.process_update(update)

        asyncio.run(process())
        return "ok"
    else:
        abort(403)

# --- –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ---
if __name__ == "__main__":
    app.run(port=5000)
