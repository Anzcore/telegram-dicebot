import os
import logging
from flask import Flask, request, abort
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ["TELEGRAM_TOKEN"]

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# Telegram Application
bot_app = Application.builder().token(TOKEN).build()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /roll, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å d20 üé≤")

# –ö–æ–º–∞–Ω–¥–∞ /roll
async def roll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import random
    result = random.randint(1, 20)
    if result == 20:
        text = "üé≤ –¢—ã –±—Ä–æ—Å–∏–ª 20! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö! üéâ"
    elif result == 1:
        text = "üé≤ –¢—ã –±—Ä–æ—Å–∏–ª 1... –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—É–¥–∞—á–∞! üíÄ"
    else:
        text = f"üé≤ –¢—ã –±—Ä–æ—Å–∏–ª {result}"
    await update.message.reply_text(text)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CommandHandler("roll", roll))

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route('/')
def index():
    return {"message": "DiceBot is running!"}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        from telegram import Update
        import asyncio

        data = request.get_json(force=True)
        update = Update.de_json(data, bot_app.bot)

        async def handle():
            await bot_app.initialize()
            await bot_app.process_update(update)

        asyncio.run(handle())  # ‚Üê —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è async —Å—Ç—Ä–æ–∫–∞
        return 'ok'
    else:
        abort(403)

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
if __name__ == "__main__":
    app.run(port=5000)